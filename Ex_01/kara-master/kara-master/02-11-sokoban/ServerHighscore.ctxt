#BlueJ class context
comment0.params=
comment0.target=ServerHighscore()
comment0.text=\n\ Constructor.\n
comment1.params=
comment1.target=boolean\ isAvailable()
comment1.text=\n\ Returns\ true\ if\ the\ ServerHighscore\ is\ available\ (can\ at\ least\ read\ highscore\ info).\n
comment10.params=levelNumber\ moves
comment10.target=void\ saveToMyInfo(int,\ int)
comment10.text=\n\ Savest\ the\ number\ of\ moves\ for\ the\ given\ level\ to\ the\ current\ users\n\ UserInfo.\n
comment11.params=
comment11.target=int\ newScore()
comment11.text=\n\ Creates\ a\ new\ score\ for\ the\ current\ user.\ It\ takes\ the\ current\ highest\ score\ and\n\ adds\ 1.\ This\ way\ we\ can\ always\ be\ shure\ that\ the\ top\ 315\ players\ are\ all\ possible\n\ players\ in\ any\ of\ the\ highscores.\n
comment12.params=dec
comment12.target=int\ encodeInt(int[])
comment12.text=\n\ Encodes\ the\ specified\ integers\ into\ one\ integer.\ \n\ The\ specified\ integers\ must\ be\ maximum\ 3\ and\ each\ smaller\ or\ equal\ to\ 999.\n
comment13.params=dec
comment13.target=java.lang.String\ encodeString(int[])
comment13.text=\n\ Encodes\ the\ specified\ integers\ into\ one\ String.\ \n\ The\ integers\ must\ be\ a\ maximum\ of\ 15\ and\ each\ smaller\ or\ equal\ to\ 999.\n\ The\ Strings\ are\ appended.\n
comment14.params=encoded
comment14.target=int[]\ decodeInt(int)
comment14.text=\n\ Decodes\ the\ specified\ encoded\ integer\ into\ an\ array\ of\n\ exactly\ three\ integers\ (each\ smaller\ or\ equal\ to\ 999).\n
comment15.params=encoded
comment15.target=int[]\ decodeString(java.lang.String)
comment15.text=\n\ Decodes\ the\ specified\ string\ into\ an\ array\ of\ exactly\ 15\ integers.\n\ Each\ integer\ is\ smaller\ or\ equal\ to\ 999.\n
comment2.params=
comment2.target=void\ initHighscores()
comment2.text=\ \n\ Initially\ loads\ the\ highscore\ from\ the\ server.\n
comment3.params=
comment3.target=boolean\ isReadOnly()
comment3.text=\n\ Returns\ it\ the\ manager\ is\ read\ only.\n
comment4.params=
comment4.target=java.lang.String\ getCurrentPlayerName()
comment4.text=\n\ Returns\ the\ name\ of\ the\ current\ player.\ If\ the\ user\ is\ not\ logged\n\ in,\ null\ is\ returned.\n
comment5.params=currentPlayerName
comment5.target=void\ setCurrentPlayerName(java.lang.String)
comment5.text=\n\ This\ is\ ignored\ since\ the\ user\ name\ is\ set\ through\ the\ login\ in\ UserInfo.\n
comment6.params=levelNumber
comment6.target=Highscore\ getHighscoreForLevel(int)
comment6.text=\n\ Returns\ the\ Highscore\ for\ the\ specified\ level.\ The\ returned\n\ Highscore\ is\ a\ clone.\ To\ store\ a\ change\ in\ the\ highscore,\ the\ method\n\ setHighscore(...)\ must\ be\ called.\n
comment7.params=highscore
comment7.target=void\ setHighscore(Highscore)
comment7.text=\n\ Sets\ the\ specified\ Highscore\ and\ stores\ it\ to\ the\ server.\n
comment8.params=
comment8.target=void\ initHighscoresFromUserInfos()
comment8.text=\n\ Gets\ the\ top\ UserInfos\ and\ initializes\ the\ level\ move\ map.\n
comment9.params=userInfo
comment9.target=void\ processUserInfo(greenfoot.UserInfo)
comment9.text=\n\ Processes\ the\ UserInfo\ and\ adds\ them\ to\ the\ highscore\ map.\ \n
numComments=16
